|SPLProgr
	|ProcDefs
		|PD
			|proc
			|proceduretest
			|{
			|Algorithm
				|Instr
					|Assign
						|LHS
							|Var
								|numberone
						|:=
						|Expr
							|Const
								|1
				|;
				|Algorithm
					|Instr
						|Assign
							|LHS
								|Var
									|numbertwo
							|:=
							|Expr
								|BinOp
									|add
									|(
									|Expr
										|Var
											|numberone
									|,
									|Expr
										|Const
											|2
									|)
					|;
					|Algorithm
						|Instr
							|Assign
								|LHS
									|Field
										|numberarray
										|[
										|Const
											|0
										|]
								|:=
								|Expr
									|Var
										|numberone
						|;
						|Algorithm
							|Instr
								|Assign
									|LHS
										|Field
											|numberarray
											|[
											|Var
												|numberone
											|]
									|:=
									|Expr
										|Var
											|numbertwo
							|;
							|Algorithm
								|Instr
									|Assign
										|LHS
											|Var
												|numberone
										|:=
										|Expr
											|UnOp
												|input
												|(
												|Var
													|numbertwo
												|)
								|;
								|Algorithm
									|Instr
										|Assign
											|LHS
												|output
											|:=
											|Expr
												|Var
													|numbertwo
									|;
			|return
			|;
			|VarDecl
				|Dec
					|TYP
						|num
					|Var
						|numberone
				|;
				|VarDecl
					|Dec
						|TYP
							|num
						|Var
							|numbertwo
					|;
					|VarDecl
						|Dec
							|arr
							|TYP
								|num
							|[
							|Const
								|2
							|]
							|Var
								|numberarray
						|;
			|}
		|,
	|main
	|{
	|Algorithm
		|Instr
			|Assign
				|LHS
					|Var
						|fullman
				|:=
				|Expr
					|Const
						|"HAPPY 1"
		|;
		|Algorithm
			|Instr
				|Branch
					|if
					|(
					|Expr
						|Var
							|truetest
					|)
					|then
					|{
					|Algorithm
						|Instr
							|Assign
								|LHS
									|Var
										|filly
								|:=
								|Expr
									|Const
										|"HAPPY 2"
						|;
						|Algorithm
							|Instr
								|PCall
									|call
									|proceduretest
							|;
					|}
			|;
			|Algorithm
				|Instr
					|Loop
						|do
						|{
						|}
						|until
						|(
						|Expr
							|Var
								|truetest
						|)
				|;
				|Algorithm
					|Instr
						|Loop
							|while
							|(
							|Expr
								|Var
									|truetest
							|)
							|do
							|{
							|}
					|;
					|Algorithm
						|Instr
							|PCall
								|call
								|proceduretest
						|;
	|halt
	|;
	|VarDecl
		|Dec
			|TYP
				|string
			|Var
				|fullman
		|;
		|VarDecl
			|Dec
				|TYP
					|bool
				|Var
					|truetest
			|;
	|}
